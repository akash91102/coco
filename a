HANDLE_REQUIREMENT_HAIRCUT_UPDATE = (event) => {
    let inputElement = event?.target;
    let clone = _.cloneDeep(this.state.config);
    let requirementHaircutValue;
    let formData = Object.assign({}, this.props.data),
        compositeProfile = Object.assign({}, formData.compositeProfile),
        legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
        attributes = Object.assign({}, legalAgreement.attributes);
    
    if (inputElement && inputElement.value !== undefined) {
        requirementHaircutValue = inputElement.value;
    } else {
        clone.layout.find(x => x.refKey === 'parameters')?.data.map(x => {
            x.column.map(form => {
                if (form.title === 'Requirement Haircut/Multiplier') {
                    requirementHaircutValue = form.value;
                }
            });
        });
    }
    
    let processedHaircutValue;
    let displayValue;
    
    // Check if the value is empty, null, or undefined
    if (requirementHaircutValue == null || 
        requirementHaircutValue === undefined || 
        requirementHaircutValue === '' || 
        requirementHaircutValue === 'null') {
        
        if (inputElement && inputElement === document.activeElement) {
            // User is actively typing - default to 1
            processedHaircutValue = 1;
            displayValue = 1;
        } else {
            // Field is empty and user is not actively typing - keep it null
            processedHaircutValue = null;
            displayValue = '';
        }
    } else {
        // Clean and validate the value
        let cleanValue = String(requirementHaircutValue)
            .trim()
            .replace(/,/g, '')
            .replace(/[^\d.]/g, '');
        
        let numericValue = parseFloat(cleanValue);
        
        if (isNaN(numericValue)) {
            processedHaircutValue = 1;
            displayValue = 1;
        } else if (numericValue <= 0) {
            processedHaircutValue = 0;
            displayValue = 0;
        } else if (numericValue > 10) {
            processedHaircutValue = 10;
            displayValue = 10;
        } else {
            processedHaircutValue = numericValue;
            displayValue = numericValue;
        }
    }
    
    // Update input element display
    if (inputElement) {
        inputElement.value = displayValue;
        if (displayValue !== '') {
            inputElement.setAttribute('value', displayValue);
        } else {
            inputElement.removeAttribute('value');
        }
    } else {
        try {
            const foundInput = document.querySelector('input[placeholder*="Enter value"]') ||
                document.querySelector('input[type="number"][step="0.01"]') ||
                document.querySelector('input[min="0"][max="10"]');
            
            if (foundInput) {
                foundInput.value = displayValue;
                if (displayValue !== '') {
                    foundInput.setAttribute('value', displayValue);
                } else {
                    foundInput.removeAttribute('value');
                }
            }
        } catch (error) {
            // Silently handle error
        }
    }
    
    // Update form configuration
    let snapshot = clone.layout.find(x => x.refKey === 'parameters')?.data.map(x => {
        x.column.map(form => {
            if (form.title === 'Requirement Haircut/Multiplier') {
                form.value = processedHaircutValue;
                form.source = 'USER';
            }
        });
        return x;
    });
    
    // Set the attribute value - use null for empty values
    attributes.requirementHairCut = processedHaircutValue;
    legalAgreement.attributes = attributes;
    compositeProfile.legalAgreement = legalAgreement;
    formData.compositeProfile = compositeProfile;
    
    this.props.onFormUpdate(snapshot);
    this.props.onCustFormUpdate(formData);
    
    this.setState({ config: clone, ready: false }, () => {
        this.setState({ ready: true }, () => {
            setTimeout(() => {
                const inputToCheck = inputElement ||
                    document.querySelector('input[placeholder*="Enter value"]') ||
                    document.querySelector('input[type="number"][step="0.01"]') ||
                    document.querySelector('input[min="0"][max="10"]');
                
                if (inputToCheck) {
                    inputToCheck.value = displayValue;
                    if (displayValue !== '') {
                        inputToCheck.setAttribute('value', displayValue);
                    } else {
                        inputToCheck.removeAttribute('value');
                    }
                }
            }, 50);
        });
    });
};
