HANDLE_REQUIREMENT_HAIRCUT_UPDATE : (event) => {
    let inputElement = event?.target;
    let clone = _.cloneDeep(this.state.config);
    let requirementHaircutValue;
    let formData = Object.assign({}, this.props.data),
        compositeProfile = Object.assign({}, formData.compositeProfile),
        legalAgreement = Object.assign({}, compositeProfile.legalAgreement),
        attributes = Object.assign({}, legalAgreement.attributes);
    
    if (inputElement && inputElement.value !== undefined) {
        requirementHaircutValue = inputElement.value;
    } else {
        clone.layout.find(x => x.refKey === 'parameters')?.data.map(x => {
            x.column.map(form => {
                if (form.title === 'Requirement Haircut/Multiplier') {
                    requirementHaircutValue = form.value;
                }
            });
        });
    }
    
    let processedHaircutValue;
    let isEmptyValue = false;
    
    if (requirementHaircutValue == null || 
        requirementHaircutValue === undefined || 
        requirementHaircutValue === '' || 
        requirementHaircutValue === 'null' ||
        (typeof requirementHaircutValue === 'string' && requirementHaircutValue.trim() === '')) {
        
        if (inputElement && inputElement === document.activeElement) {
            processedHaircutValue = '';
            isEmptyValue = true;
        } else {
            processedHaircutValue = undefined;
            isEmptyValue = true;
        }
    } else {
        let cleanValue = String(requirementHaircutValue)
            .trim()
            .replace(/,/g, '')
            .replace(/[^\d.]/g, '');
        
        if (cleanValue === '') {
            processedHaircutValue = undefined;
            isEmptyValue = true;
        } else {
            let numericValue = parseFloat(cleanValue);
            
            if (isNaN(numericValue)) {
                processedHaircutValue = 1;
            } else if (numericValue <= 0) {
                processedHaircutValue = 0;
            } else if (numericValue > 10) {
                processedHaircutValue = 10;
            } else {
                processedHaircutValue = numericValue;
            }
        }
    }
    
    if (inputElement) {
        if (isEmptyValue) {
            inputElement.value = '';
            inputElement.removeAttribute('value');
        } else {
            inputElement.value = processedHaircutValue;
            inputElement.setAttribute('value', processedHaircutValue);
        }
    } else {
        try {
            const foundInput = document.querySelector('input[placeholder*="Enter value"]') ||
                document.querySelector('input[type="number"][step="0.01"]') ||
                document.querySelector('input[min="0"][max="10"]');
            
            if (foundInput) {
                if (isEmptyValue) {
                    foundInput.value = '';
                    foundInput.removeAttribute('value');
                } else {
                    foundInput.value = processedHaircutValue;
                    foundInput.setAttribute('value', processedHaircutValue);
                }
            }
        } catch (error) {
        }
    }
    
    let snapshot = clone.layout.find(x => x.refKey === 'parameters')?.data.map(x => {
        x.column.map(form => {
            if (form.title === 'Requirement Haircut/Multiplier') {
                if (isEmptyValue) {
                    form.value = undefined;
                    form.isEmpty = true;
                } else {
                    form.value = processedHaircutValue;
                    form.isEmpty = false;
                }
                form.source = 'USER';
            }
        });
        return x;
    });
    
    if (isEmptyValue) {
        delete attributes.requirementHairCut;
    } else {
        attributes.requirementHairCut = processedHaircutValue;
    }
    
    legalAgreement.attributes = attributes;
    compositeProfile.legalAgreement = legalAgreement;
    formData.compositeProfile = compositeProfile;
    
    this.props.onFormUpdate(snapshot);
    this.props.onCustFormUpdate(formData);
    
    this.setState({ config: clone, ready: false }, () => {
        this.setState({ ready: true }, () => {
            setTimeout(() => {
                const inputToCheck = inputElement ||
                    document.querySelector('input[placeholder*="Enter value"]') ||
                    document.querySelector('input[type="number"][step="0.01"]') ||
                    document.querySelector('input[min="0"][max="10"]');
                
                if (inputToCheck) {
                    if (isEmptyValue) {
                        inputToCheck.value = '';
                        inputToCheck.removeAttribute('value');
                    } else {
                        inputToCheck.value = processedHaircutValue;
                        inputToCheck.setAttribute('value', processedHaircutValue);
                    }
                }
            }, 50);
        });
    });
};
