import moment from "moment";
import React, { Component } from "react";
import autoBind from "react-autobind";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { configSetup, newFormBind, tableEntryUpdate } from "../../../../../../javascript/config";
import { fetchConfig } from "./config/config";

import { 
    objectExists, 
    traverseFormToBindValue, 
    cloneObject,
    traverseObjectAndReturn,
    traverseObject 
} from "../../../../../../javascript/utility";

import { mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal } from "../../../../../../javascript/mixins";

import { Spinner, Dialog, DialogContent, DialogActions, Button } from "@jpmuitk/components";
import { DataGrid } from "@jpmuitk/data-grid";

import Buttons from "../../../../../Common/Buttons/Buttons";
import FormBuilder from "../../../../../Common/FormBuilder";
import Header from "../../../../../Common/Header/Header";

import * as appStateAction from "../../../../../../actions/appStateAction";
import { isReadWrite } from "../../../../../../javascript/entitlementUtils";
import { MessageBox } from "../../../../../Common/messagebox";

let selectedRowIdx = null;

class XMProfileFields extends Component {
    constructor(props) {
        super(props);

        this.state = {
            permissions: {
                readonly: this.getPermission(props),
            },
            config: null,
            toggleState: true,
            ready: true,
            gridApi: {},
            modal: {
                disabled: null,
                show: false,
                header: {},
                formdata: null,
                onUpdate: () => { },
                onSave: () => { },
            },
            resetFormFields: {
                resetIfSelected: [{ field: "frequency", value: "*" }],
                resetExclude: ["frequency"],
            },
        };

        this.bindedEvents = {
            CREATE_NEW_MASTER_AGREEMENT: () => {
                const data = this.props.data || this.props.profileData || {};
                let newEntry = null;
                
                selectedRowIdx = null;
                
                this.toggleModal({
                    state: true,
                    header: { title: 'Add New Master Agreement' },
                    formdata: newFormBind({ formdata: this.state.config.create.newMasterAgreements }),
                    onUpdate: (newdata) => {
                        newEntry = tableEntryUpdate({ newdata, markSource: true });
                    },
                    onSave: () => {
                        console.log('Saving new master agreement...');
                        this.setState({ resetTable: true }, () => {
                            let exists = false;
                            let formData = cloneObject(data);
                            
                            if (!formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
                                this.initializeProfileData(formData);
                            }
                
                            // Check for duplicate Agreement IDs
                            if (formData.compositeProfile.legalAgreement.attributes.masterAgreements) {
                                formData.compositeProfile.legalAgreement.attributes.masterAgreements.forEach(item => {
                                    if (item.agreementId === newEntry.agreementId?.value) {
                                        exists = true;
                                        MessageBox.error('Validation Error', 'Agreement ID already exists. Please enter a unique Agreement ID.', 500);
                                    }
                                });
                            }
                
                            if (!exists) {
                                // Transform the form data into the expected table format
                                const newAgreement = {
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '', 
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || ''
                                };
                
                                formData.compositeProfile.legalAgreement.attributes.masterAgreements.push(newAgreement);
                                this.toggleModal({ state: false });
                                
                                if (this.props.onCustFormUpdate) {
                                    this.props.onCustFormUpdate(formData);
                                }
                                
                                // Refresh the grid
                                if (this.state.gridApi["masterAgreements"]) {
                                    this.state.gridApi["masterAgreements"].setRowData(
                                        formData.compositeProfile.legalAgreement.attributes.masterAgreements
                                    );
                                    this.gridBindEvents(this.state.gridApi["masterAgreements"]);
                                }
                                
                                this.setState({ resetTable: false });
                            }
                        });
                    }
                });
            },
        };

        autoBind(this);

        this.buttons = this.state.permissions.readonly
            ? [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
            ]
            : [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
                {
                    title: "Save Draft",
                    onclick: this.props.onSave,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Submit",
                    onclick: this.props.onSubmit,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Deactivate",
                    onclick: this.props.onDeactivate,
                    displayIf: this.isProfileActive.bind(this),
                },
                {
                    title: "Activate",
                    onclick: this.props.onActivate,
                    displayIf: this.isProfileInactive.bind(this),
                },
            ];
    }

    getPermission(props) {
        const profileReadOnly = props.data?.profileReadOnly || false;
        const userHasWriteAccess = isReadWrite(props.userInfo, "ROLE_AGENCY_UI_READ_WRITE");
        return profileReadOnly || !userHasWriteAccess;
    }

    isProfileNewOrActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return !profilePresent || status === "Live" || status === "New";
    }

    isProfileActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Live";
    }

    isProfileInactive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Inactive";
    }

    componentDidMount() {
        try {
            const config = fetchConfig(this.props.appState?.lob || "xm");
            this.setup(config);
        } catch (error) {
            console.error("Error loading XM config:", error);
            const fallbackConfig = {
                layout: [
                    {
                        refKey: "agreement",
                        header: { title: "XM Profile Information" },
                        type: "form",
                        data: [],
                    },
                ],
                create: {
                    newMasterAgreements: {
                        data: [{ column: [] }]
                    }
                }
            };
            this.setup(fallbackConfig);
        }
    }

    setup = (config) => {
        let cloneData = this.props.data || {};
        this.initializeProfileData(cloneData);

        let configSetupVar = configSetup({
            config,
            formdata: cloneData,
            staticData: this.props.staticData,
            bindFunctions: this.bindedEvents,
        });

        this.setState({ config: configSetupVar });

        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(cloneData);
        }
    };

    initializeProfileData = (data) => {
        if (!data.compositeProfile) {
            data.compositeProfile = {};
        }

        if (!data.compositeProfile.legalAgreement) {
            data.compositeProfile.legalAgreement = {
                profileId: "",
                profileType: "",
                version: 0,
                updatedBy: "",
                updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                attributes: {},
            };
        }

        if (!data.compositeProfile.legalAgreement.attributes) {
            data.compositeProfile.legalAgreement.attributes = {
                agreementType: "",
                spn: "",
                ecd: "",
                tier: "",
                tierVersion: "",
                tierEffectiveDate: "",
                addOn: "",
                houseMultiplier: "",
                status: "New",
            };
        }

        if (typeof data.compositeProfile.legalAgreement.version == "number") {
            data.compositeProfile.legalAgreement.version = data.compositeProfile.legalAgreement.version.toString();
        }

        if (!data.compositeProfile.legalAgreement.attributes.masterAgreements) {
            data.compositeProfile.legalAgreement.attributes.masterAgreements = [];
        }

        // Process existing data if available
        if (data.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value) {
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.eci) {
                data.compositeProfile.legalAgreement.attributes.eci = 
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.eci;
            }
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.spn) {
                data.compositeProfile.legalAgreement.attributes.spn = 
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.spn;
            }
            
            let legalAgreementProfiles = this.processLegalAgreementProfiles(data);
            data.compositeProfile.legalAgreement.attributes.masterAgreements = legalAgreementProfiles;
        }
    };

    onGridReady = ({ e, refKey }) => {
        const { gridApi } = this.state;
        const { api } = e;

        gridApi[refKey] = api;

        this.setState({ gridApi }, () => {
            api.sizeColumnsToFit();
            this.gridBindEvents({ api: gridApi[refKey] });
        });
    };

    gridBindEvents = ({ api }) => {
        setTimeout(() => {
            document.querySelectorAll(".masterAgreementRemoveBtn").forEach((ele, index) => {
                ele.classList.remove("masterAgreementRemoveBtn");

                ele.addEventListener("click", () => {
                    const { gridApi } = this.state;
                    let rowData = [];
                    const gridApi_ma = gridApi["masterAgreements"];

                    gridApi_ma.forEachNode((rowNode, i) => {
                        if (i !== index) {
                            rowData.push(rowNode.data);
                        }
                    });

                    gridApi_ma.setRowData(rowData);

                    let formData = this.props.data || {};
                    if (formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
                        formData.compositeProfile.legalAgreement.attributes.masterAgreements.splice(index, 1);
                    }
                    
                    if (this.props.onCustFormUpdate) {
                        this.props.onCustFormUpdate(formData);
                    }

                    this.gridBindEvents({ api: gridApi_ma });
                });
            });
        });
    };

    isFormValid = (props) => {
        mixinIsFormValid({ ...props, _this: this });
    };

    toggleModal = (props) => {
        mixinToggleModal({ ...props, _this: this });
    };

    checkGlobalConditions = (renderIf = null) => {
        return mixinCheckGlobalConditions({ renderIf, _this: this });
    };

    render() {
        const {
            buttons,
            bindedEvents,
            checkGlobalConditions,
            toggleModal,
            onGridReady,
            isFormValid,
        } = this;

        const { ready, modal, config, permissions } = this.state;
        const { onFormUpdate, staticData } = this.props;

        let formData = this.props.data || {};

        return (
            <div style={{ marginTop: "10px", marginBottom: "10px" }}>
                {!!config && ready ? (
                    <>
                        {/* Loop through JSON config layout */}
                        {config.layout.map((x, i) => {
                            const {
                                refKey,
                                header,
                                type,
                                data,
                                columnDefs,
                                renderIf,
                                bind,
                                rowClassRules,
                            } = x;

                            return checkGlobalConditions(renderIf) ? (
                                <div
                                    className={
                                        !!type &&
                                            (type === "amount" ||
                                                type === "eligibleProduct")
                                            ? "rating-container"
                                            : "dt-container"
                                    }
                                    key={i}
                                >
                                    {!!header ? (
                                        <Header
                                            {...header}
                                            bindedEvents={bindedEvents}
                                            permissions={permissions}
                                        />
                                    ) : null}

                                    {!!type && type === "form" ? (
                                        <FormBuilder
                                            data={data}
                                            onFormUpdate={onFormUpdate}
                                            bindedEvents={bindedEvents}
                                            permissions={permissions}
                                            staticData={staticData}
                                        />
                                    ) : null}

                                    {!!type && type === "datatable" ? (
                                        <DataGrid
                                            suppressRowClickSelection={true}
                                            containerProps={{
                                                style: { height: "200px" },
                                            }}
                                            rowStripes
                                            columnDefs={columnDefs}
                                            rowClassRules={rowClassRules}
                                            rowData={traverseFormToBindValue({
                                                formData,
                                                bind,
                                            })}
                                            onGridReady={(e) => {
                                                onGridReady({ e, refKey });
                                            }}
                                            refKey={refKey}
                                        />
                                    ) : null}
                                </div>
                            ) : null;
                        })}

                        {/* Modal for adding new master agreement */}
                        <Dialog
                            onEntered={() => {}}
                            open={modal.show}
                            onClick={() => {}}
                            onClose={() => { toggleModal(false) }}
                        >
                            <div>
                                {!!modal.show ? (
                                    <DialogContent>
                                        <div className='dt-container'>
                                            <Header {...modal.header} permissions={permissions} />
                                            <FormBuilder 
                                                data={this.state.modal.formdata?.data || []} 
                                                onFormUpdate={modal.onUpdate} 
                                                isFormValid={isFormValid}
                                                selectedRowIdx={selectedRowIdx}
                                                gridApi={this.state.gridApi}
                                                resetFormFields={this.state.resetFormFields}
                                                permissions={permissions}
                                                staticData={staticData}
                                            />
                                        </div>
                                    </DialogContent>
                                ) : null}

                                <DialogActions>
                                    {!permissions.readonly ? (
                                        <Button variant={'cta'} disabled={modal.disabled} onClick={modal.onSave}>
                                            Save
                                        </Button>
                                    ) : null}
                                    <Button variant={'cta'} onClick={() => { toggleModal(false) }}>
                                        Close
                                    </Button>
                                </DialogActions>
                            </div>
                        </Dialog>

                        <Buttons data={buttons} />
                    </>
                ) : (
                    <div style={{ padding: "20px", textAlign: "center" }}>
                        <Spinner />
                        <p>Loading XM Profile configuration...</p>
                    </div>
                )}
            </div>
        );
    }

    processLegalAgreementProfiles = (data) => {
        let legalAgreementProfiles = [];
        const crossMarginStats = data?.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value;

        if (Array.isArray(crossMarginStats) && crossMarginStats.length > 0) {
            crossMarginStats.forEach((statItem) => {
                const legalEntities = statItem?.legalEntities;
                if (Array.isArray(legalEntities) && legalEntities.length > 0) {
                    legalEntities.forEach((entity) => {
                        const profilesObj = entity?.legalAgreementProfiles;
                        if (profilesObj && typeof profilesObj === 'object') {
                            Object.keys(profilesObj).forEach(agreementType => {
                                const profiles = profilesObj[agreementType];
                                if (Array.isArray(profiles)) {
                                    profiles.forEach((profile, index) => {
                                        legalAgreementProfiles.push({
                                            agreementId: profile.profileId,
                                            lineOfBusiness: profile.lineOfBusiness,
                                            agreementCategory: agreementType,
                                            profileType: profile.profileType,
                                            legalEntityName: profile.lineOfBusiness,
                                            status: profile.profileStatus,
                                            updatedBy: profile.updatedBy,
                                            updatedAt: profile.updatedAt,
                                            createdBy: profile.createdBy,
                                            version: profile.version,
                                            _originalData: profile,
                                            _agreementType: agreementType
                                        });
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }

        return legalAgreementProfiles;
    };
}

const mapStateToProps = (state) => {
    const { appState } = state;
    return { appState };
};

const mapDispatchToProps = (dispatch) => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch),  
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(XMProfileFields);
